//@Author: WangQixiang (wangqx at mpreader.com)
//@Date: 2016/08/29
syntax = "proto3";

package crypto;

//////////////// Symmetric
// EBC
// CBC

enum SymmetricKeyBits {
  SymmetricKeyBitsUnknown = 0;
  SymmetricKey128Bits = 128;
  SymmetricKey256Bits = 256;
}

message CreateSymmetricKeyRequest {
  SymmetricKeyBits key_bits = 1;
}

message CreateSymmetricKeyResponse {
  string key = 1;
}

// CBC
message CbcEncryptFileRequest {
  string key = 1;
  string iv = 2;
  string file_source_path = 3;
  string file_target_path = 4;
}

message CbcEncryptFileResponse {
}

message CbcDecryptFileRequest {
  string key = 1;
  string iv = 2;
  string file_source_path = 3;
  string file_target_path = 4;
}

message CbcDecryptFileResponse {
}

message CbcEncryptStringRequest {
  string key = 1;
  string iv = 2;
  string plaintext = 3;
}

message CbcEncryptStringResponse {
  string cipher = 1; // HexEncode string
}

message CbcDecryptStringRequest {
  string key = 1;
  string iv = 2;
  string cipher = 3; // HexEncode string
}

message CbcDecryptStringResponse {
  string plaintext = 1;
}

// ECB
message EcbEncryptFileRequest {
  string key = 1;
  string file_source_path = 2;
  string file_target_path = 3;
}

message EcbEncryptFileResponse {
}

message EcbDecryptFileRequest {
  string key = 1;
  string file_source_path = 2;
  string file_target_path = 3;
}

message EcbDecryptFileResponse {
}

message EcbEncryptStringRequest {
  string key = 1;
  string plaintext = 2;
}

message EcbEncryptStringResponse {
  string cipher = 1; // HexEncode string
}

message EcbDecryptStringRequest {
  string key = 1;
  string cipher = 2; // HexEncode string
}

message EcbDecryptStringResponse {
  string plaintext = 1;
}

service SymmetricService {
  rpc CreateSymmetricKey(CreateSymmetricKeyRequest) returns (CreateSymmetricKeyResponse);

  // CBC
  rpc CbcEncryptFile(CbcEncryptFileRequest) returns (CbcEncryptFileResponse);
  rpc CbcDecryptFile(CbcDecryptFileRequest) returns (CbcDecryptFileResponse);

  rpc CbcEncryptString(CbcEncryptStringRequest) returns (CbcEncryptStringResponse);
  rpc CbcDecryptString(CbcDecryptStringRequest) returns (CbcDecryptStringResponse);

  // ECB
  rpc EcbEncryptFile(EcbEncryptFileRequest) returns (EcbEncryptFileResponse);
  rpc EcbDecryptFile(EcbDecryptFileRequest) returns (EcbDecryptFileResponse);

  rpc EcbEncryptString(EcbEncryptStringRequest) returns (EcbEncryptStringResponse);
  rpc EcbDecryptString(EcbDecryptStringRequest) returns (EcbDecryptStringResponse);
}

//////////////// Asymmetric
// RSA & SM2 

enum AsymmetricType {
  AsymmetricTypeUnknown = 0;
  SM2 = 1;
  RSA = 2;
}

enum AsymmetricKeyBits {
  KeyBitsUnknown = 0;
  KEY192BITS = 192;
  KEY256BITS = 256;
  KEY1024BITS= 1024; // Only for rsa
}

message CreateKeyPairRequest { 
  AsymmetricType type = 1;
  AsymmetricKeyBits key_bits = 2; 
}

message CreateKeyPairResponse {
  string public_key = 2;
  string private_key = 3; 
}

//
message PublicKeyEncryptRequest {
  AsymmetricType type = 1;
  string public_key = 2;
  string plaintext = 3;
}

message PublicKeyEncryptResponse {
  string cipher = 1;
}

message PrivateKeyDecryptRequest {
  AsymmetricType type = 1;
  string private_key = 2;
  string cipher = 3;
}

message PrivateKeyDecryptResponse {
  string plaintext = 1;  
}

service AsymmetricService {
  rpc CreateKeyPair(CreateKeyPairRequest) returns (CreateKeyPairResponse);
  rpc PublicKeyEncrypt(PublicKeyEncryptRequest) returns (PublicKeyEncryptResponse);
  rpc PrivateKeyDecrypt(PrivateKeyDecryptRequest) returns (PrivateKeyDecryptResponse);
  // TODO(wqx):
  // signature & verify
}
